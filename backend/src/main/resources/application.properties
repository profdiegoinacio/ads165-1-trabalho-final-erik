# --- Configuração da Conexão com o Banco de Dados PostgreSQL ---
# URL para se conectar ao seu banco de dados.
spring.datasource.url=jdbc:postgresql://localhost:5432/conectapro_db
# Usuário de acesso ao banco.
spring.datasource.username=postgres
# Senha de acesso ao banco.
spring.datasource.password=Erik1234


# --- Configurações do JPA e Hibernate ---
# Dialeto específico para o PostgreSQL, ajuda o Hibernate a gerar o SQL correto.
# (Opcional, pois o Spring Boot geralmente detecta automaticamente).
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Estratégia de geração do schema. 'update' é ideal para desenvolvimento.
# ATENÇÃO: NÃO use 'create' ou 'create-drop' a menos que queira apagar todos os dados ao reiniciar.
spring.jpa.hibernate.ddl-auto=update

# Mostra no console as queries SQL que o Hibernate está executando. Ótimo para debug.
spring.jpa.show-sql=true

# Formata o SQL mostrado no console para ficar mais legível.
spring.jpa.properties.hibernate.format_sql=true


# --- Configuração de Perfil do Spring ---
# Ativa o perfil 'dev'. No nosso caso, isso faz com que a classe 'DbInitialization'
# (que tem a anotação @Profile("dev")) seja executada para criar usuários de teste.
spring.profiles.active=dev


# --- Configurações de Segurança JWT ---
# Chave secreta usada para assinar e validar os tokens JWT.
# IMPORTANTE: Em produção, use um valor forte, aleatório e gerenciado de forma segura.
api.security.jwt.secret=Y29kaWZpY2FjYW9CYXNlNjRNdWl0b1NlZ3VyYVN1cGVyU2VjcmV0YVBhcmFNZXVKV1QxMjM0NQ==

# Tempo de expiração do token em milissegundos. 7200000ms = 2 horas.
api.security.jwt.expiration-ms=7200000